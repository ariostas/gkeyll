#!/bin/sh

OSTYPE=`uname -o`
MACHINE=`uname -n`
USER=`whoami`
echo "# OS type is $OSTYPE on $MACHINE user $USER"

# Defaults
PREFIX=${HOME}/gkylsoft
APP=all
ALLTARGETS=gkeyll

# default build options
CC=cc
ARCH_FLAGS=-march=native
CUDA_ARCH=70

USE_MPI=
USE_LUA=
CONF_LUA_LIB=luajit-5.1

# Location of CUDA math libraries
CUDAMATH_LIBS=

# ----------------------------------------------------------------------------
# Function definitions
# ----------------------------------------------------------------------------

show_help() {
cat <<EOF

./configure [options=value]

Configure GkeyllZero build system. This step is optional if you are
okay with the default parameters.

NOTE: At present, the configure script DOES NOT check if you have
specified valid paths. YOU are responsible for setting them correctly!

CC                         C compiler to use. Default is system cc
ARCH_FLAGS                 Architecture flags to use. Default '-march=native'
CUDA_ARCH                  CUDA architecture flag to specify compute capability. 
                           Use CUDA_ARCH=70 for V100, CUDA_ARCH=80 for A100, etc. 
                           Default is CUDA_ARCH=70.

-h
--help                     This help.
--prefix=DIR               Prefix where GkeyllZero is installed
                           Default is $HOME/gkylsoft/

--use-mpi                  [no] Build MPI-dependent code
--use-nccl                 [no] Build NCCL-dependent code
--use-cudss                [no] Build CUDSS-dependent code
--use-lua                  [no] Build Lua dependent code
--app                      [all] What app to build? One of
			   moments, vlasov, gyrokinetic, pkpm, all

Library Includes and Locations

--lapack-inc               Location of Lapacke headers
--lapack-lib               Full path to Lapack static library

--superlu-inc              Location of SuperLU headers
--superlu-lib              Full path to SuperLU static library

--mpi-inc                  Location of MPI headers
--mpi-lib                  Location to MPI library

--nccl-inc                 Location of NCCL headers
--nccl-lib                 Location to NCCL library

--cudss-inc                 Location of cuDSS headers
--cudss-lib                 Location to cuDSS library

--lua-inc                  Location of Lua headers
--lua-lib                  Location to Lua library

--cudamath-libdir          Full path to CUDA math libraries

EOF
}

# Helper functions

find_program() {
   prog=`command -v "$1" 2>/dev/null`
   if [ -n "$prog" ]
   then
      dirname "$prog"
   fi
}

die() {
   echo "$*"
   echo
   echo "Configured failed."
   echo
   exit 1
}

# ----------------------------------------------------------------------------
# MAIN PROGRAM
# ----------------------------------------------------------------------------

# Parse options

while [ -n "$1" ]
do
   value="`echo $1 | sed 's/[^=]*.\(.*\)/\1/'`"
   key="`echo $1 | sed 's/=.*//'`"
   if `echo "$value" | grep "~" >/dev/null 2>/dev/null`
   then
      echo
      echo '*WARNING*: the "~" sign is not expanded in flags.'
      echo 'If you mean the home directory, use $HOME instead.'
      echo
   fi
   case "$key" in
   -h)
      show_help
      exit 0
      ;;
   --help)
      show_help
      exit 0
      ;;
   CC)
      [ -n "$value" ] || die "Missing value in flag $key."
      CC="$value"
      ;;
   ARCH_FLAGS)
      [ -n "$value" ] || die "Missing value in flag $key."
      ARCH_FLAGS="$value"
      ;;   
   CUDA_ARCH)
      [ -n "$value" ] || die "Missing value in flag $key."
      CUDA_ARCH="$value"
      ;;   
   --prefix)
      [ -n "$value" ] || die "Missing value in flag $key."
      PREFIX="$value"
      ;;
   --app)
      [ -n "$value" ] || die "Missing value in flag $key."
      APP="$value"
      ;;
   --lapack-inc)
      [ -n "$value" ] || die "Missing value in flag $key."
      LAPACK_INC="$value"
      ;;
   --lapack-lib)
      [ -n "$value" ] || die "Missing value in flag $key."
      LAPACK_LIB="$value"
      ;;
   --superlu-inc)
      [ -n "$value" ] || die "Missing value in flag $key."
      SUPERLU_INC="$value"
      ;;
   --superlu-lib)
      [ -n "$value" ] || die "Missing value in flag $key."
      SUPERLU_LIB="$value"
      ;;
   --use-mpi)
      [ -n "$value" ] || die "Missing value in flag $key."
      USE_MPI="$value"
      ;;       
   --mpi-inc)
      [ -n "$value" ] || die "Missing value in flag $key."
      CONF_MPI_INC_DIR="$value"
      ;;
   --mpi-lib)
      [ -n "$value" ] || die "Missing value in flag $key."
      CONF_MPI_LIB_DIR="$value"
      ;;
   --use-nccl)
      [ -n "$value" ] || die "Missing value in flag $key."
      USE_NCCL="$value"
      ;;       
   --nccl-inc)
      [ -n "$value" ] || die "Missing value in flag $key."
      CONF_NCCL_INC_DIR="$value"
      ;;
   --nccl-lib)
      [ -n "$value" ] || die "Missing value in flag $key."
      CONF_NCCL_LIB_DIR="$value"
      ;;
   --use-cudss)
      [ -n "$value" ] || die "Missing value in flag $key."
      USE_CUDSS="$value"
      ;;       
   --cudss-inc)
      [ -n "$value" ] || die "Missing value in flag $key."
      CONF_CUDSS_INC_DIR="$value"
      ;;
   --cudss-lib)
      [ -n "$value" ] || die "Missing value in flag $key."
      CONF_CUDSS_LIB_DIR="$value"
      ;;
   --use-lua)
      [ -n "$value" ] || die "Missing value in flag $key."
      USE_LUA="$value"
      ;;       
   --lua-inc)
      [ -n "$value" ] || die "Missing value in flag $key."
      CONF_LUA_INC_DIR="$value"
      ;;
   --lua-lib)
      [ -n "$value" ] || die "Missing value in flag $key."
      CONF_LUA_LIB_DIR="$value"
      ;;   
   --cudamath-libdir)
      [ -n "$value" ] || die "Missing value in flag $key."
      CUDAMATH_LIBDIR="$value"
      ;;
   *)
      die "Error: Unknown flag: $1"
      ;;
   esac
   shift
done

if [ "$USE_MPI" = "yes" ]
then
    USE_MPI=1
else
    USE_MPI=
fi

if [ "$USE_NCCL" = "yes" ]
then
    USE_NCCL=1
else
    USE_NCCL=
fi

if [ "$USE_CUDSS" = "yes" ]
then
    USE_CUDSS=1
else
    USE_CUDSS=
fi

if [ "$USE_LUA" = "yes" ]
then
    USE_LUA=1
else
    USE_LUA=
fi

echo "Building APP " $APP

if [ "$APP" = "moments" ]
then
    ALLTARGETS="moments moments moments-unit moments-regression"
elif [ "$APP" = "vlasov" ]
then
    ALLTARGETS="vlasov vlasov vlasov-unit vlasov-regression"
elif [ "$APP" = "gyrokinetic" ]
then
    ALLTARGETS="gyrokinetic gyrokinetic gyrokinetic-unit gyrokinetic-regression"
elif [ "$APP" = "pkpm" ]
then
    ALLTARGETS="pkpm pkpm pkpm-unit pkpm-regression"
else
    ALLTARGETS=gkeyll
fi

# Default lapack include and libraries: we prefer linking to static library
: "${LAPACK_INC:=$PREFIX/OpenBLAS/include}"
: "${LAPACK_LIB=$PREFIX/OpenBLAS/lib/libopenblas.a}"

# MPI specific paths and flags
: "${CONF_MPI_INC_DIR=$PREFIX/openmpi/include/}"
: "${CONF_MPI_LIB_DIR=$PREFIX/openmpi/lib/}"

# Lua specific paths and flags
: "${CONF_LUA_INC_DIR=$PREFIX/luajit/include/luajit-2.1}"
: "${CONF_LUA_LIB_DIR=$PREFIX/luajit/lib/}"

# cuDSS specific paths and flags
: "${CONF_CUDSS_INC_DIR=$PREFIX/cuDSS/include/}"
: "${CONF_CUDSS_LIB_DIR=$PREFIX/cuDSS/lib/}"

# SuperLU includes and librararies
: "${SUPERLU_INC=$PREFIX/superlu/include}"
if [ "$OSTYPE" = "linux-gnu"* ]
then
    : "${SUPERLU_LIB=$PREFIX/superlu/lib64/libsuperlu.a}"
else
    : "${SUPERLU_LIB=$PREFIX/superlu/lib/libsuperlu.a}"
fi

# Write out config.mak
cat <<EOF1 > config.mak
# Generated automatically! Do not edit

# Installation directory
PREFIX=$PREFIX
# Compilers
CC=$CC
ARCH_FLAGS=$ARCH_FLAGS
CUDA_ARCH=$CUDA_ARCH

# App to build
BUILD_APP=$APP

# Library paths
LAPACK_INC=$LAPACK_INC
LAPACK_LIB=$LAPACK_LIB

SUPERLU_INC=$SUPERLU_INC
SUPERLU_LIB=$SUPERLU_LIB

USE_MPI=$USE_MPI
CONF_MPI_INC_DIR=$CONF_MPI_INC_DIR
CONF_MPI_LIB_DIR=$CONF_MPI_LIB_DIR

USE_NCCL=$USE_NCCL
CONF_NCCL_INC_DIR=$CONF_NCCL_INC_DIR
CONF_NCCL_LIB_DIR=$CONF_NCCL_LIB_DIR

USE_CUDSS=$USE_CUDSS
CONF_CUDSS_INC_DIR=$CONF_CUDSS_INC_DIR
CONF_CUDSS_LIB_DIR=$CONF_CUDSS_LIB_DIR

USE_LUA=$USE_LUA
CONF_LUA_INC_DIR=$CONF_LUA_INC_DIR
CONF_LUA_LIB_DIR=$CONF_LUA_LIB_DIR
CONF_LUA_LIB=$CONF_LUA_LIB

CUDAMATH_LIBDIR=$CUDAMATH_LIBDIR

all: $ALLTARGETS ## Build only specified Apps ($APP)

EOF1

echo "# Wrote config.mak with contents:"
cat config.mak
